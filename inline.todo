# inline TODO summary:
Updated:	2019-11-21 16:44:24.185844

# CRIT:

 ## `network/neuron.h`:
  [ ] CRIT: make Neuron class actually work 
  (line 17)

 ## `run/driver.h`:
  [ ] CRIT: use network class instead of vector of neurons 
  (line 35)
  [ ] CRIT: get rid of this, inherit from chemtype 
  (line 68)
  [ ] CRIT: create Network class 
  (line 70)

 ## `waveform/waveform_D.h`:
  [ ] CRIT: go over all waveform code 
  (line 19)

# TODO:

 ## `axon/axon.h`:
  [ ] TODO: make all of this depend on config file chem types 
  (line 15)
  [ ] TODO: move this all to config file? 
  (line 16)
  [ ] TODO: have search angle `tau` depend on cellType 
  (line 29)
  [ ] TODO: get grid numbers from cellType 
  (line 90)

 ## `network/generator.old/network.h`:
  [ ] TODO: neuron chemtypes for this 
  (line 94)

 ## `network/neuron.h`:
  [ ] TODO: integrate Neuron class with cellTypes 
  (line 18)
  [ ] TODO: waveforms 
  (line 37)
  [ ] TODO: dendrites? both RV and references 
  (line 40)
  [ ] TODO: update waveforms 
  (line 51)

 ## `run/config_default.c`:
  [ ] TODO: chemType configuration: diffusion coefficient, etc 
  (line 96)

 ## `run/consts.h`:
  [ ] TODO: make search_vec more extensible 
  (line 108)

 ## `run/driver.h`:
  [ ] TODO: ambient concentrations, baseline stimulation 
  (line 31)
  [ ] TODO: print config and initial state to files/console 
  (line 73)
  [ ] TODO: move write functions to their respective classes? 
  (line 110)
  [ ] TODO: check for validity of path 
  (line 115)
  [ ] TODO: add grid ID, grid size 
  (line 213)

 ## `run/main.cpp`:
  [ ] TODO: pass timestep to `save_state` function 
  (line 27)

 ## `waveform/waveform_D.h`:
  [ ] TODO: wf_compress(wf, i); 
  (line 153)
  [ ] TODO: check for period/phase greater than TIMESTEP_DIFF ? 
  (line 196)
  [ ] TODO: kill/adjust spikes that are too close 
  (line 206)

# FIXME:

 ## `network/network.h`:
  [ ] FIXME: network update function 
  (line 34)
  [ ] FIXME: state saving to stringstream 
  (line 77)

 ## `run/driver.h`:
  [ ] FIXME: name of driver class? 
  (line 44)

 ## `run/main.cpp`:
  [ ] FIXME: pass name (from argv) to Driver ctor 
  (line 21)

 ## `util/cJSON/cJSON.c`:
  [ ] FIXME: Can overflow here. Cannot be fixed without breaking the API */ 
  (line 1735)

# FIX:

 ## `network/network.h`:
  [ ] FIXME: network update function 
  (line 34)
  [ ] FIXME: state saving to stringstream 
  (line 77)

 ## `run/driver.h`:
  [ ] FIXME: name of driver class? 
  (line 44)
  [ ] FIXME: label and correct init for dGrids 
  (line 64)

 ## `run/main.cpp`:
  [ ] FIXME: pass name (from argv) to Driver ctor 
  (line 21)

 ## `util/cJSON/cJSON.c`:
  [ ] FIXME: Can overflow here. Cannot be fixed without breaking the API */ 
  (line 1735)

# BUG:

 ## `util/err_util.h`:
  [ ] void __DEBUG( std::string const& msg ); 
  (line 24)
  [ ] void __DEBUG(); 
  (line 25)

 ## `waveform/waveform_D.h`:
  [ ] ~__DEBUG("wf_act, input size: " + std::to_string(wf.size())); 
  (line 149)
  [ ] __DEBUG("naive wf_out size: " + std::to_string(wf_out.size())); 
  (line 168)
  [ ] __DEBUG("wf_small size: " + std::to_string(wf_small.size())); 
  (line 169)
  [ ] __DEBUG("\t i = " + std::to_string(i)); 
  (line 177)
  [ ] __DEBUG("\t\t j = " + std::to_string(j)); 
  (line 181)
  [ ] __DEBUG("done wf_act, out size: " + std::to_string(wf_out.size())); 
  (line 204)

# DEBUG:

 ## `util/err_util.h`:
  [ ] void __DEBUG( std::string const& msg ); 
  (line 24)
  [ ] void __DEBUG(); 
  (line 25)

 ## `waveform/waveform_D.h`:
  [ ] ~__DEBUG("wf_act, input size: " + std::to_string(wf.size())); 
  (line 149)
  [ ] __DEBUG("naive wf_out size: " + std::to_string(wf_out.size())); 
  (line 168)
  [ ] __DEBUG("wf_small size: " + std::to_string(wf_small.size())); 
  (line 169)
  [ ] __DEBUG("\t i = " + std::to_string(i)); 
  (line 177)
  [ ] __DEBUG("\t\t j = " + std::to_string(j)); 
  (line 181)
  [ ] __DEBUG("done wf_act, out size: " + std::to_string(wf_out.size())); 
  (line 204)

# UGLY:

 ## `network/neuron.h`:
  [ ] UGLY: NT release vars 
  (line 32)
  [ ] UGLY: hardcoded NT release 
  (line 53)

 ## `run/config.h`:
  [ ] UGLY: make this poisson/exponential instead? 
  (line 87)

 ## `run/config_default.c`:
  [ ] UGLY: improve configuration of cell types 
  (line 80)

# NOTE:

 ## `axon/axon.h`:
  [ ] NOTE: this can be modified later if we choose to update gradient sensing 
  (line 73)

 ## `network/generator.old/generator.cpp`:
  [ ] NOTE: if modifying network topology during operation, then this should be written seperately 
  (line 192)

 ## `util/cJSON/cJSON.h`:
  [ ] NOTE: cJSON is not always 100% accurate in estimating how much memory it will use, so to be safe allocate 5 bytes more than you actually need */ 
  (line 160)

 ## `util/dj_fft.h`:
  [ ] QUICK NOTES 
  (line 8)
  [ ] NOTE: only works for positive power of 2s 
  (line 64)
  [ ] NOTE: Only works for 32-bit words max 
  (line 86)
  [ ] NOTE: Only works for arrays whose size is a power-of-two 
  (line 111)
  [ ] NOTE: the input must be a square matrix whose size is a power-of-two 
  (line 152)
  [ ] NOTE: the input must be a square matrix whose size is a power-of-two 
  (line 221)

 ## `waveform/waveform_D.h`:
  [ ] NOTE: modifies waveform "main" 
  (line 139)
  [ ] NOTE: in csv file, phase and period stored explicitly 
  (line 235)

# REVIEW:

 ## `axon/axon.h`:
  [ ] REVIEW: move multiple times per diffusion timestep? 
  (line 64)

 ## `network/generator.old/network.h`:
  [ ] REVIEW: clustering of positions, range gen chem type, padding 
  (line 87)

 ## `network/network.h`:
  [ ] REVIEW: clustering of positions, range gen chem type, padding 
  (line 54)

 ## `run/main_legacy.cpp`:
  [ ] REVIEW: clustering of positions, rang gen chem type 
  (line 38)

 ## `waveform/waveform_D.h`:
  [ ] REVIEW: f_phase set to avg, change this? 
  (line 106)
  [ ] REVIEW: this sort might not be needed, adding for safety for now 
  (line 150)
  [ ] REVIEW: crashes if i==j, figure out why. probably irrelevant but idk 
  (line 186)

# OPTIMIZE:

 ## `waveform/waveform_D.h`:
  [ ] OPTIMIZE: reserve space? 
  (line 156)

# CONFIG:

 ## `run/config.h`:
  [ ] ifndef CONFIG_H 
  (line 8)
  [ ] define CONFIG_H 
  (line 9)
